{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["/*\ntype stringOrNumber = string | Number;\n\ntype PersonObject = {\n  name: string,\n  surname: string,\n  id: stringOrNumber\n}\n\nconst PersonOne : PersonObject = {\n  name: 'Damilare',\n  surname: 'Adeola',\n  id: 2\n}\n\nconst PersonTwo : PersonObject = {\n  name: 'Sholape',\n  surname: 'Ogunjobi',\n  id: 'three'\n}\n\nconst PersonThree : PersonObject = {\n  name: 'Chikam',\n  surname: 'Odi',\n  id: 10\n}\n\nconst PrintPersonOne = (person : PersonObject) => {\n  console.log(`Name: ${person.name}, ID: ${person.id}`)\n}\n\nconst PrintFullName = (person : PersonObject) => {\n  console.log(`Fullname: ${person.name} ${person.surname}`)\n}\n\nPrintPersonOne(PersonTwo)\nPrintFullName(PersonThree\n\n*/\n/*\ntype Book = {\n  title: string | Number,\n  author: string,\n  yearOfPublication: Number | null,\n  publicationHouse: string | null,\n  genre: string | null\n}\n\nconst thingsFallApart : Book = {\n  title: 'Things Fall Apart',\n  author: 'Chinua Achebe',\n  yearOfPublication: 1962,\n  publicationHouse: 'Heinamann',\n  genre: 'Literature'\n}\n\nconst lionAndJewel : Book = {\n  title: 'Lion and the Jewel',\n  author: 'Wole Soyinka',\n  yearOfPublication: 1970,\n  publicationHouse: null,\n  genre: 'Literature'\n}\n\nconst PrintLiterature = (book : Book) => {\n  console.log(`Title: ${book.title},\\n Author: ${book.author}`)\n}\n\nPrintLiterature(thingsFallApart)\n*/\n\n/*\ninterface Poetry {\n  name: string | Number\n  author: string | Number\n  nobel: Boolean\n  genre: string[]\n  age: Number\n}\n\nconst arthur: Poetry = {\n  name: 'Happy As If I Kissed A Girl',\n  author: 'Arthur Rimbaud',\n  nobel: false,\n  genre: ['Romantic', 'Lyrical'],\n  age: 45\n}\n\nconst PrintPoetry = (poet: Poetry) => {\n  console.log(`Name: ${poet.name},\\nAuthor: ${poet.author},\\nNobel Prize: ${poet.nobel},\\nGenre: ${poet.genre[1]},\\nAge: ${poet.age}`)\n}\n\nPrintPoetry(arthur)\n*/\n\n/*\ninterface language {\n  id: number,\n  language: string,\n  englishFirstLanguage: boolean\n}\n\nconst languageOne : language = {\n  id: 1,\n  language: 'Yoruba',\n  englishFirstLanguage: true\n}\n\nconst printLanguage = (lang : language) => {\n  console.log(`${lang.id},\\n${lang.language},\\n${lang.englishFirstLanguage}`)\n}\n\nprintLanguage(languageOne)\n*/\n\n/*\nimport { countryLifeExpectancy } from './life.js'\n\ninterface age {\n  yearOfBirth: number,\n  residentCountry: string\n}\n*/\n\n/*\nconst countryLifeExpectancy = {\n  HongKong : {\n    male: 82.38,\n    female: 88.17 \n    }, \n  Japan : {\n    male: 81.91,\n    female: 88.09\n    }\n}\n*/\n//console.log(countryLifeExpectancy)\n\n/*\nvar lifeExpectancy: number\n\nconst remainingYears = (life: age) => {\n  let date = new Date()\n  let year = date.getFullYear()\n  let currentAge = year - life.yearOfBirth\n  let countryExpectancy = life.residentCountry\n*/\n// Destructuring countries\n\n/*\n  const [countries, expectancies] = countryLifeExpectancy\n  const countryNames = countries.country\n  const listOfCountries = Object.values(countryNames)\n*/\n// Destructuring life expectancy\n\n/*\n  const expectancyYears = expectancies.years\n  const listOfExpectancies = Object.values(expectancyYears)\n*/\n//console.log(listOfExpectancies)\n/*\n  for (let value in listOfCountries) {\n    if (listOfCountries[value] == countryExpectancy) {\n      lifeExpectancy = Number(listOfExpectancies[(listOfCountries.indexOf(countryExpectancy))].toFixed())\n      lifeExpectancy = lifeExpectancy - currentAge\n    }\n  }\n\n  return lifeExpectancy\n}\n\nconst satoglu: age = {\n  yearOfBirth: 2000,\n  residentCountry: 'Mali'\n}\n\nif (lifeExpectancy === 0) {\n  console.log(`Sorry ${satoglu.residentCountry}\\'s data is not available`)\n} else {\n  console.log(`You have ${remainingYears(satoglu)} years left.`)\n}\n*/\n\n/*\ninterface Color<T> {\n  name: String,\n  intensity: String | Number,\n  family: T\n}\n\nconst red: Color<String> = {\n  name: 'Red',\n  intensity: 'Passion',\n  family: 'Primary'\n}\n\nconst PrintColor = (c: Color<String>) => {\n  console.log(c.family);\n  console.log(c.name);\n  console.log(c.intensity);\n}\n\nPrintColor(red);\n*/\n\ninterface Family<T> {\n  name: String,\n  age: Number,\n  isMarried: Boolean,\n  birthPosition: String | Number,\n  occupation: T\n}\n\nconst yourFamily = (member: Family<String>) => {\n  console.log(`${member.name}\\n${member.age}\\n${member.isMarried}\\n${member.birthPosition}\\n${member.occupation}`)\n}\n\nlet lare: Family<String> = {\n  name: 'Damilare',\n  age: 31,\n  isMarried: false,\n  birthPosition: 'Fifth',\n  occupation: 'Computer Scientist & Machine Learning Engineer'\n}\n\nyourFamily(lare);"],
  "mappings": "AAsNA,MAAM,aAAa,CAAC,WAA2B;AAC7C,UAAQ,IAAI,GAAG,OAAO;AAAA,EAAS,OAAO;AAAA,EAAQ,OAAO;AAAA,EAAc,OAAO;AAAA,EAAkB,OAAO;AAAA;AAGrG,IAAI,OAAuB;AAAA,EACzB,MAAM;AAAA,EACN,KAAK;AAAA,EACL,WAAW;AAAA,EACX,eAAe;AAAA,EACf,YAAY;AAAA;AAGd,WAAW;",
  "names": []
}
