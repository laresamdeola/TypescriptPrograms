{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["\n/*\ntype stringOrNumber = string | Number;\n\ntype PersonObject = {\n  name: string,\n  surname: string,\n  id: stringOrNumber\n}\n\nconst PersonOne : PersonObject = {\n  name: 'Damilare',\n  surname: 'Adeola',\n  id: 2\n}\n\nconst PersonTwo : PersonObject = {\n  name: 'Sholape',\n  surname: 'Ogunjobi',\n  id: 'three'\n}\n\nconst PersonThree : PersonObject = {\n  name: 'Chikam',\n  surname: 'Odi',\n  id: 10\n}\n\nconst PrintPersonOne = (person : PersonObject) => {\n  console.log(`Name: ${person.name}, ID: ${person.id}`)\n}\n\nconst PrintFullName = (person : PersonObject) => {\n  console.log(`Fullname: ${person.name} ${person.surname}`)\n}\n\nPrintPersonOne(PersonTwo)\nPrintFullName(PersonThree\n\n*/\n/*\ntype Book = {\n  title: string | Number,\n  author: string,\n  yearOfPublication: Number | null,\n  publicationHouse: string | null,\n  genre: string | null\n}\n\nconst thingsFallApart : Book = {\n  title: 'Things Fall Apart',\n  author: 'Chinua Achebe',\n  yearOfPublication: 1962,\n  publicationHouse: 'Heinamann',\n  genre: 'Literature'\n}\n\nconst lionAndJewel : Book = {\n  title: 'Lion and the Jewel',\n  author: 'Wole Soyinka',\n  yearOfPublication: 1970,\n  publicationHouse: null,\n  genre: 'Literature'\n}\n\nconst PrintLiterature = (book : Book) => {\n  console.log(`Title: ${book.title},\\n Author: ${book.author}`)\n}\n\nPrintLiterature(thingsFallApart)\n*/\n\n/*\ninterface Poetry {\n  name: string | Number\n  author: string | Number\n  nobel: Boolean\n  genre: string[]\n  age: Number\n}\n\nconst arthur: Poetry = {\n  name: 'Happy As If I Kissed A Girl',\n  author: 'Arthur Rimbaud',\n  nobel: false,\n  genre: ['Romantic', 'Lyrical'],\n  age: 45\n}\n\nconst PrintPoetry = (poet: Poetry) => {\n  console.log(`Name: ${poet.name},\\nAuthor: ${poet.author},\\nNobel Prize: ${poet.nobel},\\nGenre: ${poet.genre[1]},\\nAge: ${poet.age}`)\n}\n\nPrintPoetry(arthur)\n*/\n\n/*\ninterface language {\n  id: number,\n  language: string,\n  englishFirstLanguage: boolean\n}\n\nconst languageOne : language = {\n  id: 1,\n  language: 'Yoruba',\n  englishFirstLanguage: true\n}\n\nconst printLanguage = (lang : language) => {\n  console.log(`${lang.id},\\n${lang.language},\\n${lang.englishFirstLanguage}`)\n}\n\nprintLanguage(languageOne)\n*/\n\nimport { countryLifeExpectancy } from './data.js'\n\ninterface age {\n  yearOfBirth: number,\n  residentCountry: string,\n  gender: string\n}\n\n/*\nconst countryLifeExpectancy = {\n  HongKong : {\n    male: 82.38,\n    female: 88.17 \n    }, \n  Japan : {\n    male: 81.91,\n    female: 88.09\n    }\n}\n*/\n\n\nconst remainingYears = (life : age) => {\n  let date = new Date()\n  let year = date.getFullYear()\n  let currentAge = year - life.yearOfBirth\n  let countryExpectancy = life.residentCountry\n  let lifeExpectancy = 0\n\n  for(let i in countryLifeExpectancy){\n    if(i == countryExpectancy) {\n      if(life.gender == 'male') {\n        lifeExpectancy = countryLifeExpectancy[i].male - currentAge\n      }\n      if(life.gender == 'female') {\n        lifeExpectancy = countryLifeExpectancy[i].female - currentAge\n      } \n    }\n  }\n\n  return lifeExpectancy.toFixed()\n}\n\nconst satoglu : age = {\n  yearOfBirth: 2000,\n  residentCountry: 'HongKong',\n  gender: 'female'\n}\n\nconsole.log(`You have ${remainingYears(satoglu)} years left.`)\nconsole.log(countryLifeExpectancy)\n\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAoHA,kBAAsC;AAsBtC,MAAM,iBAAiB,CAAC,SAAe;AACrC,MAAI,OAAO,IAAI;AACf,MAAI,OAAO,KAAK;AAChB,MAAI,aAAa,OAAO,KAAK;AAC7B,MAAI,oBAAoB,KAAK;AAC7B,MAAI,iBAAiB;AAErB,WAAQ,KAAK,mCAAsB;AACjC,QAAG,KAAK,mBAAmB;AACzB,UAAG,KAAK,UAAU,QAAQ;AACxB,yBAAiB,kCAAsB,GAAG,OAAO;AAAA;AAEnD,UAAG,KAAK,UAAU,UAAU;AAC1B,yBAAiB,kCAAsB,GAAG,SAAS;AAAA;AAAA;AAAA;AAKzD,SAAO,eAAe;AAAA;AAGxB,MAAM,UAAgB;AAAA,EACpB,aAAa;AAAA,EACb,iBAAiB;AAAA,EACjB,QAAQ;AAAA;AAGV,QAAQ,IAAI,YAAY,eAAe;AACvC,QAAQ,IAAI;",
  "names": []
}
